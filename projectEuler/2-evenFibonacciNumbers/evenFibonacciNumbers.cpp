/** 
*
* Author: 		Robert Skelton
* Date 			10.7.13
* Filename: 	evenFibonacciNumbers.cpp
* Email: 		robertjskelton@gmail.com
* Description:  Project Euler Problem 2: Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
*				By starting with 1 and 2, the first 10 terms will be:
*				1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
*				By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. 
*
*/

#include <iostream>
#include <string>
//#include <vector>
using namespace std;

long fib(int n);

int main() {
	
	int x = 0;
	int y = 1;
	int z;
	int sum = 0;

	do {
	    z = x + y;
	    x = y;
	    y = z;
	    if (y % 2 == 0) sum += y;
	} while (y <= 4000000);
	cout << "The total sum is: " << sum << endl;

/*
	long sum = 0;
	for (long i = 1; i < 400000; i++) {
		if(fib(i) % 2 == 0)
			sum += i;
	}

	cout << "\nThe total sum is: " << sum << endl;
}

// write all to text file then find the sum?

// recursive fibonacci
int fib(int n)
{
  if((n == 1) || (n == 2))
      return 1;
  else
      return fib(n - 1) + fib(n - 2);
}

// iterative fibonacci
long fib(int n) {
	int k, sum;
	int fib1 = 0;
	int fib2 = 1;
	for (k = 0; k < n; k++) {
      sum = fib1 + fib2;
	  fib1 = fib2;
      fib2 = sum;
	}
   return fib1;*/
}